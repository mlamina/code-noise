{% extends "base.html.jinja2" %}

{% block title %}Code Noise{% endblock %}

{% block content %}

    <section class="section">
        <div class="container">
            <h2 class="title">Background Noise for Coders</h2>
            <p class="subtitle">Adjust the sliders to craft the perfect background noise</p>
            <div class="columns is-multiline is-variable is-8">
                {% for noise in noises %}
                <div class="column is-full">
                    <div class="box">
                        <div class="columns is-flex is-justify-content-space-between is-align-items-center">
                            <div class="column is-half">
                                <h3 class="subtitle">{{ noise.title }}</h3>
                                <p class="content wi">{{ noise.description }}</p>
                            </div>
                            <div class="column">
                                <label class="label" for="{{ noise.id }}-volume">Volume:</label>
                                <div class="control">
                                    <input class="slider is-fullwidth" type="range" id="{{ noise.id }}-volume" name="{{ noise.id }}-volume" min="0" max="{{ noise.max_volume }}" step="{{ noise.step }}" value="0">
                                </div>
                            </div>
                            <div class="column">
                                <div class="control">
                                    <button class="button is-success" id="{{ noise.id }}-toggle">Play</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
            <div class="columns is-multiline is-variable is-8">
                {% for video in videos %}
                <div class="column is-full">
                    <div class="box">
                        <div class="columns is-flex is-justify-content-space-between is-align-items-center">
                            <div class="column is-half">
                                <h3 class="subtitle">{{ video.title }}</h3>
                                <div id="{{ video.id }}-player"></div>
                            </div>
                            <div class="column">
                                <label class="label" for="{{ video.id }}-volume">Volume:</label>
                                <div class="control">
                                    <input class="slider is-fullwidth" type="range" id="{{ video.id }}-volume" name="{{ video.id }}-volume" min="0" max="100" step="1" value="50">
                                </div>
                            </div>
                            <div class="column">
                                <div class="control">
                                    <button class="button is-success" id="{{ video.id }}-toggle">Play</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </section>

    <script>
        let audioContext = new (window.AudioContext || window.webkitAudioContext)();

        let noiseBuffers = {
            white: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate),
            pink: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate),
            brown: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate)
        };

        function generateNoise(buffer, type) {
            let output = buffer.getChannelData(0);
            if (type === 'white') {
                for (let i = 0; i < buffer.length; i++) {
                    output[i] = Math.random() * 2 - 1;
                }
            } else if (type === 'pink') {
                let b0, b1, b2, b3, b4, b5, b6;
                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    b0 = 0.99886 * b0 + white * 0.0555179;
                    b1 = 0.99332 * b1 + white * 0.0750759;
                    b2 = 0.96900 * b2 + white * 0.1538520;
                    b3 = 0.86650 * b3 + white * 0.3104856;
                    b4 = 0.55000 * b4 + white * 0.5329522;
                    b5 = -0.7616 * b5 - white * 0.0168980;
                    output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                    output[i] *= 0.11; // (roughly) compensate for gain
                    b6 = white * 0.115926;
                }
            } else if (type === 'brown') {
                let lastOut = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    output[i] = (lastOut + (0.02 * white)) / 1.02;
                    lastOut = output[i];
                    output[i] *= 3.5; // (roughly) compensate for gain
                }
            }
        }

        generateNoise(noiseBuffers.white, 'white');
        generateNoise(noiseBuffers.pink, 'pink');
        generateNoise(noiseBuffers.brown, 'brown');

        function playNoise(buffer, volumeId) {
            let gainNode = audioContext.createGain();
            let noise = audioContext.createBufferSource();
            noise.buffer = buffer;
            noise.loop = true;
            noise.connect(gainNode);
            gainNode.connect(audioContext.destination);
            gainNode.gain.setValueAtTime($('#' + volumeId).val(), audioContext.currentTime);
            noise.start();
            return { noise, gainNode };
        }

        let noises = {};

        function toggleNoise(noiseObj, buffer, volumeId, buttonId) {
            if (!noiseObj) {
                noiseObj = playNoise(buffer, volumeId);
                $('#' + buttonId).text('Stop').removeClass('is-success').addClass('is-danger');
            } else {
                noiseObj.noise.stop();
                noiseObj = null;
                $('#' + buttonId).text('Play').removeClass('is-danger').addClass('is-success');
            }
            return noiseObj;
        }

        {% for noise in noises %}
        $('#{{ noise.id }}-toggle').on('click', function() {
            noises['{{ noise.id }}'] = toggleNoise(noises['{{ noise.id }}'], noiseBuffers['{{ noise.id }}'], '{{ noise.id }}-volume', '{{ noise.id }}-toggle');
        });

        $('#{{ noise.id }}-volume').on('input', function() {
            if (noises['{{ noise.id }}']) {
                noises['{{ noise.id }}'].gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
            }
        });
        {% endfor %}
    </script>

    <script src="https://www.youtube.com/iframe_api?v=1e3332"></script>

    <script>
        let youtubePlayers = {};

        function onYouTubeIframeAPIReady() {
            {% for video in videos %}
            youtubePlayers['{{ video.id }}'] = new YT.Player('{{ video.id }}-player', {
                height: '100',
                width: '100%',
                videoId: '{{ video.id }}',
                events: {
                    'onReady': onPlayerReady('{{ video.id }}')
                }
            });
            {% endfor %}
        }

        function onPlayerReady(videoId) {
            return function(event) {
                $('#' + videoId + '-toggle').on('click', function() {
                    if (youtubePlayers[videoId].getPlayerState() === YT.PlayerState.PLAYING) {
                        youtubePlayers[videoId].pauseVideo();
                        $('#' + videoId + '-toggle').text('Play').removeClass('is-danger').addClass('is-success');
                    } else {
                        youtubePlayers[videoId].playVideo();
                        $('#' + videoId + '-toggle').text('Stop').removeClass('is-success').addClass('is-danger');
                    }
                });

                $('#' + videoId + '-volume').on('input', function() {
                    youtubePlayers[videoId].setVolume(this.value);
                });
            }
        }

        // Check if YT object is already defined
        if (window.YT && YT.Player) {
            onYouTubeIframeAPIReady();
        }
    </script>
{% endblock %}
