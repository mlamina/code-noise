{% extends "base.html.jinja2" %}

{% block title %}Home{% endblock %}

{% block content %}
    <section class="section">
        <div class="container">
            <h2 class="title">Background Noise Generator</h2>
            <div class="field">
                <label class="label" for="volume">Volume:</label>
                <div class="control">
                    <input class="slider is-fullwidth" type="range" id="volume" name="volume" min="0" max="1" step="0.01" value="0.5">
                </div>
            </div>
            <div class="field">
                <label class="label" for="frequency">Frequency:</label>
                <div class="control">
                    <input class="slider is-fullwidth" type="range" id="frequency" name="frequency" min="20" max="20000" step="1" value="440">
                </div>
            </div>
            <div class="field">
                <label class="label" for="type">Type:</label>
                <div class="control">
                    <div class="select is-fullwidth">
                        <select id="type" name="type">
                            <option value="white">White</option>
                            <option value="pink">Pink</option>
                            <option value="brown">Brown</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="field">
                <label class="label" for="bass">Bass:</label>
                <div class="control">
                    <input class="slider is-fullwidth" type="range" id="bass" name="bass" min="0" max="100" step="1" value="50">
                </div>
            </div>
            <div class="field">
                <label class="label" for="treble">Treble:</label>
                <div class="control">
                    <input class="slider is-fullwidth" type="range" id="treble" name="treble" min="0" max="100" step="1" value="50">
                </div>
            </div>
            <div class="field">
                <label class="label" for="reverb">Reverb:</label>
                <div class="control">
                    <input class="slider is-fullwidth" type="range" id="reverb" name="reverb" min="0" max="100" step="1" value="50">
                </div>
            </div>
            <div class="field is-grouped">
                <div class="control">
                    <button class="button is-link" id="play">Play</button>
                </div>
                <div class="control">
                    <button class="button is-link is-light" id="stop">Stop</button>
                </div>
            </div>
        </div>
    </section>

    <script>
        let audioContext = new (window.AudioContext || window.webkitAudioContext)();
        let gainNode = audioContext.createGain();
        let bassFilter = audioContext.createBiquadFilter();
        bassFilter.type = "lowshelf";
        let trebleFilter = audioContext.createBiquadFilter();
        trebleFilter.type = "highshelf";
        let reverbNode = audioContext.createConvolver();

        let whiteNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);
        let pinkNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);
        let brownNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);

        function generateNoise(buffer, type) {
            let output = buffer.getChannelData(0);
            if (type === 'white') {
                for (let i = 0; i < buffer.length; i++) {
                    output[i] = Math.random() * 2 - 1;
                }
            } else if (type === 'pink') {
                let b0, b1, b2, b3, b4, b5, b6;
                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    b0 = 0.99886 * b0 + white * 0.0555179;
                    b1 = 0.99332 * b1 + white * 0.0750759;
                    b2 = 0.96900 * b2 + white * 0.1538520;
                    b3 = 0.86650 * b3 + white * 0.3104856;
                    b4 = 0.55000 * b4 + white * 0.5329522;
                    b5 = -0.7616 * b5 - white * 0.0168980;
                    output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                    output[i] *= 0.11; // (roughly) compensate for gain
                    b6 = white * 0.115926;
                }
            } else if (type === 'brown') {
                let lastOut = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    output[i] = (lastOut + (0.02 * white)) / 1.02;
                    lastOut = output[i];
                    output[i] *= 3.5; // (roughly) compensate for gain
                }
            }
        }

        generateNoise(whiteNoiseBuffer, 'white');
        generateNoise(pinkNoiseBuffer, 'pink');
        generateNoise(brownNoiseBuffer, 'brown');

        $('#play').on('click', function() {
            let type = $('#type').val();
            let noiseBuffer = type === 'white' ? whiteNoiseBuffer : type === 'pink' ? pinkNoiseBuffer : brownNoiseBuffer;
            let noise = audioContext.createBufferSource();
            noise.buffer = noiseBuffer;
            noise.loop = true;
            noise.connect(bassFilter);
            bassFilter.connect(trebleFilter);
            trebleFilter.connect(reverbNode);
            reverbNode.connect(gainNode);
            gainNode.connect(audioContext.destination);
            gainNode.gain.setValueAtTime($('#volume').val(), audioContext.currentTime);
            bassFilter.frequency.setValueAtTime(200, audioContext.currentTime);
            bassFilter.gain.setValueAtTime($('#bass').val(), audioContext.currentTime);
            trebleFilter.frequency.setValueAtTime(2000, audioContext.currentTime);
            trebleFilter.gain.setValueAtTime($('#treble').val(), audioContext.currentTime);
            // Reverb settings can be more complex, here we just set a simple gain for demonstration
            reverbNode.buffer = whiteNoiseBuffer; // Simple reverb effect
            noise.start();
        });

        $('#stop').on('click', function() {
            audioContext.close().then(function() {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                gainNode = audioContext.createGain();
                bassFilter = audioContext.createBiquadFilter();
                bassFilter.type = "lowshelf";
                trebleFilter = audioContext.createBiquadFilter();
                trebleFilter.type = "highshelf";
                reverbNode = audioContext.createConvolver();
            });
        });

        $('#volume').on('input', function() {
            gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
        });

        $('#bass').on('input', function() {
            bassFilter.gain.setValueAtTime(this.value, audioContext.currentTime);
        });

        $('#treble').on('input', function() {
            trebleFilter.gain.setValueAtTime(this.value, audioContext.currentTime);
        });

        $('#reverb').on('input', function() {
            // Reverb settings can be more complex, here we just set a simple gain for demonstration
            reverbNode.buffer = whiteNoiseBuffer; // Simple reverb effect
        });
    </script>
{% endblock %}
