{% extends "base.html.jinja2" %}

{% block title %}Home{% endblock %}

{% block content %}
    <section class="section">
        <div class="container">
            <h2 class="title">Background Noise Generator</h2>
            <p class="subtitle">Welcome to the Background Noise Generator for Programmers. Adjust the sliders to customize your perfect background noise.</p>
            <div class="columns is-multiline is-variable is-8">
                <div class="column is-one-quarter">
                    <div class="box" style="height: 100%;">
                        <h3 class="subtitle">White Noise</h3>
                        <p class="content">White noise is great for masking other sounds and improving focus.</p>
                        <div class="field">
                            <label class="label" for="white-volume">Volume:</label>
                            <div class="control">
                                <input class="slider is-fullwidth" type="range" id="white-volume" name="white-volume" min="0" max="1" step="0.01" value="0.5">
                            </div>
                        </div>
                        <div class="field">
                            <div class="control">
                                <button class="button is-success" id="white-toggle">Play</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column is-one-quarter">
                    <div class="box" style="height: 100%;">
                        <h3 class="subtitle">Pink Noise</h3>
                        <p class="content">Pink noise is softer and more soothing, ideal for relaxation.</p>
                        <div class="field">
                            <label class="label" for="pink-volume">Volume:</label>
                            <div class="control">
                                <input class="slider is-fullwidth" type="range" id="pink-volume" name="pink-volume" min="0" max="1" step="0.01" value="0.5">
                            </div>
                        </div>
                        <div class="field">
                            <div class="control">
                                <button class="button is-success" id="pink-toggle">Play</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column is-one-quarter">
                    <div class="box" style="height: 100%;">
                        <h3 class="subtitle">Brown Noise</h3>
                        <p class="content">Brown noise has a deeper sound, perfect for calming the mind.</p>
                        <div class="field">
                            <label class="label" for="brown-volume">Volume:</label>
                            <div class="control">
                                <input class="slider is-fullwidth" type="range" id="brown-volume" name="brown-volume" min="0" max="1" step="0.01" value="0.5">
                            </div>
                        </div>
                        <div class="field">
                            <div class="control">
                                <button class="button is-success" id="brown-toggle">Play</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="column is-one-quarter">
                    <div class="box" style="height: 100%;">
                        <h3 class="subtitle">YouTube Video</h3>
                        <p class="content">Play a YouTube video for additional background ambiance.</p>
                        <div class="field">
                            <iframe width="100%" height="200" src="https://www.youtube.com/embed/Nep1qytq9JM" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                        </div>
                        <div class="field">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        let audioContext = new (window.AudioContext || window.webkitAudioContext)();

        let whiteNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);
        let pinkNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);
        let brownNoiseBuffer = audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate);

        function generateNoise(buffer, type) {
            let output = buffer.getChannelData(0);
            if (type === 'white') {
                for (let i = 0; i < buffer.length; i++) {
                    output[i] = Math.random() * 2 - 1;
                }
            } else if (type === 'pink') {
                let b0, b1, b2, b3, b4, b5, b6;
                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    b0 = 0.99886 * b0 + white * 0.0555179;
                    b1 = 0.99332 * b1 + white * 0.0750759;
                    b2 = 0.96900 * b2 + white * 0.1538520;
                    b3 = 0.86650 * b3 + white * 0.3104856;
                    b4 = 0.55000 * b4 + white * 0.5329522;
                    b5 = -0.7616 * b5 - white * 0.0168980;
                    output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                    output[i] *= 0.11; // (roughly) compensate for gain
                    b6 = white * 0.115926;
                }
            } else if (type === 'brown') {
                let lastOut = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    output[i] = (lastOut + (0.02 * white)) / 1.02;
                    lastOut = output[i];
                    output[i] *= 3.5; // (roughly) compensate for gain
                }
            }
        }

        generateNoise(whiteNoiseBuffer, 'white');
        generateNoise(pinkNoiseBuffer, 'pink');
        generateNoise(brownNoiseBuffer, 'brown');

        function playNoise(buffer, volumeId) {
            let gainNode = audioContext.createGain();
            let noise = audioContext.createBufferSource();
            noise.buffer = buffer;
            noise.loop = true;
            noise.connect(gainNode);
            gainNode.connect(audioContext.destination);
            gainNode.gain.setValueAtTime(document.getElementById(volumeId).value, audioContext.currentTime);
            noise.start();
            return { noise, gainNode };
        }

        let whiteNoise, pinkNoise, brownNoise;

        function toggleNoise(noiseObj, buffer, volumeId, buttonId) {
            if (!noiseObj) {
                noiseObj = playNoise(buffer, volumeId);
                document.getElementById(buttonId).innerText = 'Stop';
                document.getElementById(buttonId).classList.remove('is-success');
                document.getElementById(buttonId).classList.add('is-danger');
            } else {
                noiseObj.noise.stop();
                noiseObj = null;
                document.getElementById(buttonId).innerText = 'Play';
                document.getElementById(buttonId).classList.remove('is-danger');
                document.getElementById(buttonId).classList.add('is-success');
            }
            return noiseObj;
        }

        document.getElementById('white-toggle').addEventListener('click', function() {
            whiteNoise = toggleNoise(whiteNoise, whiteNoiseBuffer, 'white-volume', 'white-toggle');
        });

        document.getElementById('pink-toggle').addEventListener('click', function() {
            pinkNoise = toggleNoise(pinkNoise, pinkNoiseBuffer, 'pink-volume', 'pink-toggle');
        });

        document.getElementById('brown-toggle').addEventListener('click', function() {
            brownNoise = toggleNoise(brownNoise, brownNoiseBuffer, 'brown-volume', 'brown-toggle');
        });

        document.getElementById('white-volume').addEventListener('input', function() {
            if (whiteNoise) {
                whiteNoise.gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
            }
        });

        document.getElementById('pink-volume').addEventListener('input', function() {
            if (pinkNoise) {
                pinkNoise.gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
            }
        });

        document.getElementById('brown-volume').addEventListener('input', function() {
            if (brownNoise) {
                brownNoise.gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
            }
        });

        let youtubePlayer;
        function onYouTubeIframeAPIReady() {
            youtubePlayer = new YT.Player('youtube-player', {
                events: {
                    'onReady': onPlayerReady
                }
            });
        }

        function onPlayerReady(event) {
            document.getElementById('youtube-toggle').addEventListener('click', function() {
                if (youtubePlayer.getPlayerState() === YT.PlayerState.PLAYING) {
                    youtubePlayer.pauseVideo();
                    document.getElementById('youtube-toggle').innerText = 'Play';
                    document.getElementById('youtube-toggle').classList.remove('is-danger');
                    document.getElementById('youtube-toggle').classList.add('is-success');
                } else {
                    youtubePlayer.playVideo();
                    document.getElementById('youtube-toggle').innerText = 'Stop';
                    document.getElementById('youtube-toggle').classList.remove('is-success');
                    document.getElementById('youtube-toggle').classList.add('is-danger');
                }
            });
        }

        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    </script>
{% endblock %}
