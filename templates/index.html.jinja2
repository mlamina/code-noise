{% extends "base.html.jinja2" %}

{% block title %}Code Noise{% endblock %}

{% block content %}

    <section class="section">
        <div class="container">
            <h2 class="title">Background Noise for Coders</h2>
            <p class="subtitle">Adjust the sliders to craft the perfect background noise</p>
            <div class="buttons">
                <button class="button is-primary" id="toggle-all">Play All</button>
                <button class="button is-info" id="share">Share that Noise</button>
            </div>
            <div class="columns is-multiline is-variable is-8">
                {% for noise in noises %}
                <div class="column is-full">
                    <div class="box">
                        <div class="columns is-flex is-justify-content-space-between is-align-items-center">
                            <div class="column is-half">
                                <h3 class="subtitle">{{ noise.title }}</h3>
                                <p class="content wi">{{ noise.description }}</p>
                            </div>
                            <div class="column is-flex is-align-items-center">
                                <label class="label" for="{{ noise.id }}-volume"></label>
                                <div class="control" style="margin-left: 10px; margin-right: 10px;">
                                    <input class="slider" type="range" id="{{ noise.id }}-volume" name="{{ noise.id }}-volume" min="0" max="{{ noise.max_volume }}" step="{{ noise.step }}" value="0">
                                </div>
                                <div class="control">
                                    <button class="button is-success" id="{{ noise.id }}-toggle" disabled>Play</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
            <div class="columns is-multiline is-variable is-8">
                {% for video in videos %}
                <div class="column is-full">
                    <div class="box">
                        <div class="columns is-flex is-justify-content-space-between is-align-items-center">
                            <div class="column is-half">
                                <h3 class="subtitle">{{ video.title }}</h3>
                                <div id="{{ video.id }}-player"></div>
                            </div>
                            <div class="column is-flex is-align-items-center">
                                <label class="label" for="{{ video.id }}-volume"></label>
                                <div class="control" style="margin-left: 10px; margin-right: 10px;">
                                    <input class="slider" type="range" id="{{ video.id }}-volume" name="{{ video.id }}-volume" min="0" max="100" step="1" value="50">
                                </div>
                                <div class="control">
                                    <button class="button is-success" id="{{ video.id }}-toggle" disabled>Play</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </section>

    <div class="modal" id="share-modal">
        <div class="modal-background"></div>
        <div class="modal-content">
            <div class="box">
                <p>Share or bookmark the sound you created:</p>
                <div class="field has-addons">
                    <div class="control is-expanded">
                        <input class="input" type="text" id="share-link" readonly>
                    </div>
                    <div class="control">
                        <button class="button is-info" id="copyButton" onclick="copyToClipboard()"><i class="fas fa-copy"></i></button>
                    </div>
                </div>
            </div>
        </div>
        <button class="modal-close is-large" aria-label="close"></button>
    </div>

    <script>
        function copyToClipboard() {
            const el = document.createElement('textarea');

            // Collect Values of all volume sliders
            let params = new URLSearchParams();
            {% for noise in noises %}
            params.set('{{ noise.id }}', $('#{{ noise.id }}-volume').val());
            {% endfor %}
            {% for video in videos %}
            params.set('yt_{{ video.id }}', $('#{{ video.id }}-volume').val() / 100);
            {% endfor %}
            el.value = window.location.origin + window.location.pathname + '?' + params.toString();
            document.body.appendChild(el);
            el.select();
            document.execCommand('copy');
            document.body.removeChild(el);
            const copyButton = document.getElementById('copyButton');
            copyButton.classList.add('is-success');
            copyButton.innerHTML = '<i class="fas fa-check"></i>';
            copyButton.disabled = true;
        }
    </script>

    <script>
        let audioContext = new (window.AudioContext || window.webkitAudioContext)();

        let noiseBuffers = {
            white: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate),
            pink: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate),
            brown: audioContext.createBuffer(1, 2 * audioContext.sampleRate, audioContext.sampleRate)
        };

        function generateNoise(buffer, type) {
            let output = buffer.getChannelData(0);
            if (type === 'white') {
                for (let i = 0; i < buffer.length; i++) {
                    output[i] = Math.random() * 2 - 1;
                }
            } else if (type === 'pink') {
                let b0, b1, b2, b3, b4, b5, b6;
                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    b0 = 0.99886 * b0 + white * 0.0555179;
                    b1 = 0.99332 * b1 + white * 0.0750759;
                    b2 = 0.96900 * b2 + white * 0.1538520;
                    b3 = 0.86650 * b3 + white * 0.3104856;
                    b4 = 0.55000 * b4 + white * 0.5329522;
                    b5 = -0.7616 * b5 - white * 0.0168980;
                    output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
                    output[i] *= 0.11; // (roughly) compensate for gain
                    b6 = white * 0.115926;
                }
            } else if (type === 'brown') {
                let lastOut = 0.0;
                for (let i = 0; i < buffer.length; i++) {
                    let white = Math.random() * 2 - 1;
                    output[i] = (lastOut + (0.02 * white)) / 1.02;
                    lastOut = output[i];
                    output[i] *= 3.5; // (roughly) compensate for gain
                }
            }
        }

        generateNoise(noiseBuffers.white, 'white');
        generateNoise(noiseBuffers.pink, 'pink');
        generateNoise(noiseBuffers.brown, 'brown');

        function playNoise(buffer, volumeId) {
            let gainNode = audioContext.createGain();
            let noise = audioContext.createBufferSource();
            noise.buffer = buffer;
            noise.loop = true;
            noise.connect(gainNode);
            gainNode.connect(audioContext.destination);
            gainNode.gain.setValueAtTime($('#' + volumeId).val(), audioContext.currentTime);
            noise.start();
            return { noise, gainNode };
        }

        let noises = {};

        function toggleNoise(noiseObj, buffer, volumeId, buttonId) {
            if (!noiseObj) {
                noiseObj = playNoise(buffer, volumeId);
                $('#' + buttonId).text('Stop').removeClass('is-success').addClass('is-danger');
            } else {
                noiseObj.noise.stop();
                noiseObj = null;
                $('#' + buttonId).text('Play').removeClass('is-danger').addClass('is-success');
            }
            return noiseObj;
        }

        {% for noise in noises %}
        $('#{{ noise.id }}-toggle').on('click', function() {
            noises['{{ noise.id }}'] = toggleNoise(noises['{{ noise.id }}'], noiseBuffers['{{ noise.id }}'], '{{ noise.id }}-volume', '{{ noise.id }}-toggle');
            updateToggleAllButton();
        });

        $('#{{ noise.id }}-volume').on('input', function() {
            if (noises['{{ noise.id }}']) {
                noises['{{ noise.id }}'].gainNode.gain.setValueAtTime(this.value, audioContext.currentTime);
            }
            if (this.value == 0) {
                $('#{{ noise.id }}-toggle').prop('disabled', true);
            } else {
                $('#{{ noise.id }}-toggle').prop('disabled', false);
            }
            updateToggleAllButton();
        });
        {% endfor %}

        function isNoisePlaying(noise_id) {
            return noises[noise_id] && noises[noise_id].noise.playbackState === noises[noise_id].noise.PLAYING_STATE;
        }

        $('#toggle-all').on('click', function() {
            let allPlaying = $(this).text() === 'Stop All';
            let needToStop = allPlaying;
            $(this).text(allPlaying ? 'Play All' : 'Stop All').toggleClass('is-danger', !allPlaying).toggleClass('is-primary', allPlaying);
            {% for noise in noises %}
            if (isNoisePlaying('{{ noise.id }}') && needToStop) {
                noises['{{ noise.id }}'].noise.stop();
                noises['{{ noise.id }}'] = null;
                $('#' + '{{ noise.id }}-toggle').text('Play').removeClass('is-danger').addClass('is-success');
            } else if ($('#{{ noise.id }}-volume').val() > 0 && !needToStop) {
                noises['{{ noise.id }}'] = playNoise(noiseBuffers['{{ noise.id }}'], '{{ noise.id }}-volume');
                $('#' + '{{ noise.id }}-toggle').text('Stop').removeClass('is-success').addClass('is-danger');
            }
            {% endfor %}
            {% for video in videos %}
            if ($('#{{ video.id }}-volume').val() > 0) {
                if (allPlaying) {
                    youtubePlayers['{{ video.id }}'].pauseVideo();
                    $('#' + '{{ video.id }}-toggle').text('Play').removeClass('is-danger').addClass('is-success');
                } else {
                    youtubePlayers['{{ video.id }}'].playVideo();
                    $('#' + '{{ video.id }}-toggle').text('Stop').removeClass('is-success').addClass('is-danger');
                }
            }
            {% endfor %}
        });

        $('#share').on('click', function() {
            let params = new URLSearchParams();
            {% for noise in noises %}
            params.set('{{ noise.id }}', $('#{{ noise.id }}-volume').val());
            {% endfor %}
            {% for video in videos %}
            params.set('yt_{{ video.id }}', $('#{{ video.id }}-volume').val() / 100);
            {% endfor %}
            let shareLink = window.location.origin + window.location.pathname + '?' + params.toString();
            $('#share-link').val(shareLink);
            $('#share-modal').addClass('is-active');
        });

        $('.modal-close, .modal-background').on('click', function() {
            $('#share-modal').removeClass('is-active');
        });

        // Parse URL parameters and set volumes
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.forEach((value, key) => {
            const volume = parseFloat(value);
            if (noiseBuffers[key]) {
                $('#' + key + '-volume').val(volume);
                $('#' + key + '-toggle').prop('disabled', volume === 0);
                $('#' + key + '-toggle').text('Play').removeClass('is-danger').addClass('is-success');

            }
        });

        function updateToggleAllButton() {
            let anyPlaying = false;
            {% for noise in noises %}
            if (noises['{{ noise.id }}']) {
                anyPlaying = true;
            }
            {% endfor %}
            {% for video in videos %}
            if (youtubePlayers['{{ video.id }}'] && youtubePlayers['{{ video.id }}'].getPlayerState() === YT.PlayerState.PLAYING) {
                anyPlaying = true;
            }
            {% endfor %}
            $('#toggle-all').text(anyPlaying ? 'Stop All' : 'Play All').toggleClass('is-danger', anyPlaying).toggleClass('is-primary', !anyPlaying);
        }
    </script>

    <script src="https://www.youtube.com/iframe_api?v=1e3332"></script>

    <script>
        let youtubePlayers = {};
        window.youtubePlayers = youtubePlayers;

        function onYouTubeIframeAPIReady() {
            {% for video in videos %}
            youtubePlayers['{{ video.id }}'] = new YT.Player('{{ video.id }}-player', {
                height: '100',
                width: '100%',
                videoId: '{{ video.id }}',
                events: {
                    'onReady': onPlayerReady('{{ video.id }}')
                }
            });
            {% endfor %}
        }

        function onPlayerReady(videoId) {
            return function(event) {
                youtubePlayers[videoId].setVolume(0);
                $('#' + videoId + '-volume').val(0);

                // Parse URL parameters and set volumes
                const urlParams = new URLSearchParams(window.location.search);
                urlParams.forEach((value, key) => {
                    if (key.startsWith('yt_')) {
                        const videoIdInQuery = key.substring(3);
                        const volume = parseFloat(value) * 100;
                        if (videoId === videoIdInQuery && youtubePlayers[videoId]) {
                            youtubePlayers[videoId].setVolume(volume);
                            $('#' + videoId + '-volume').val(volume);
                            console.log("Setting volume for " + videoId + " to " + volume);
                            $('#' + videoId + '-toggle').prop('disabled', volume === 0);
                        }
                    }
                });
                $('#' + videoId + '-toggle').on('click', function() {
                    if (youtubePlayers[videoId].getPlayerState() === YT.PlayerState.PLAYING) {
                        youtubePlayers[videoId].pauseVideo();
                        $('#' + videoId + '-toggle').text('Play').removeClass('is-danger').addClass('is-success');
                    } else {
                        youtubePlayers[videoId].playVideo();
                        $('#' + videoId + '-toggle').text('Stop').removeClass('is-success').addClass('is-danger');
                    }
                    // Wait for the player to start playing
                    setTimeout(updateToggleAllButton, 1000);
                });

                $('#' + videoId + '-volume').on('input', function() {
                    youtubePlayers[videoId].setVolume(this.value);
                    if (this.value == 0) {
                        $('#' + videoId + '-toggle').prop('disabled', true);
                    } else {
                        $('#' + videoId + '-toggle').prop('disabled', false);
                    }
                    updateToggleAllButton();
                });
            }
        }

        // Check if YT object is already defined
        if (window.YT && YT.Player) {
            onYouTubeIframeAPIReady();
        }
    </script>
{% endblock %}
